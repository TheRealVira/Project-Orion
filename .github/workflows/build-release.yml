name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  # GitHub Container Registry requires lowercase
  IMAGE_NAME: therealvira/project-orion

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Run TypeScript type check
        run: npm run type-check
      
      - name: Run linter
        run: npm run lint

  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: Build application
        run: npm run build
      
      - name: Create standalone archive
        run: |
          mkdir -p release
          tar -czf release/project-orion-standalone.tar.gz \
            .next/standalone \
            .next/static \
            public \
            package.json
      
      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r .next/standalone/* deploy/
          cp -r .next/static deploy/.next/
          cp -r public deploy/
          cp package.json deploy/
          cp docker-compose.yml deploy/
          cp Dockerfile deploy/
          cp .dockerignore deploy/
          cp .env.example deploy/
          tar -czf release/project-orion-deploy.tar.gz -C deploy .
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: release/*.tar.gz
          retention-days: 90

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-docker, build-artifacts]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: ./release
      
      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Generate release notes
        id: notes
        run: |
          cat > release_notes.md << 'EOF'
          ## 🚀 Project Orion ${{ steps.version.outputs.VERSION }}
          
          ### 📦 Docker Installation (Recommended)
          
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
          docker run -d -p 3000:3000 -v orion-data:/app/data ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
          ```
          
          Or use Docker Compose:
          ```yaml
          services:
            orion:
              image: ghcr.io/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
              ports:
                - "3000:3000"
              volumes:
                - orion-data:/app/data
              environment:
                - DEFAULT_ADMIN_PASSWORD=changeme123
          volumes:
            orion-data:
          ```
          
          ### 📦 Standalone Deployment
          
          1. Download `project-orion-deploy.tar.gz`
          2. Extract: `tar -xzf project-orion-deploy.tar.gz`
          3. Configure: `cp .env.example .env` and edit
          4. Run: `node server.js`
          
          ###  Default Credentials
          
          - **Email**: admin@orion.local
          - **Password**: admin123
          - ⚠️ **Change immediately after first login!**
          
          ### 📚 Documentation
          
          - [README](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [Docker Troubleshooting](https://github.com/${{ github.repository }}/blob/main/DOCKER-TROUBLESHOOTING.md)
          EOF
          
          echo "NOTES_FILE=release_notes.md" >> $GITHUB_OUTPUT
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.version.outputs.VERSION }}
          body_path: ${{ steps.notes.outputs.NOTES_FILE }}
          files: |
            release/project-orion-standalone.tar.gz
            release/project-orion-deploy.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Determine Docker tag
        id: docker-tag
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "tag=${VERSION}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/main ]]; then
            echo "tag=latest" >> $GITHUB_OUTPUT
          else
            echo "tag=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Pull Docker image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.docker-tag.outputs.tag }}
        continue-on-error: true
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.docker-tag.outputs.tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
